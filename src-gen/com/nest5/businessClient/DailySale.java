package com.nest5.businessClient;






import android.util.Log;

import com.nest5.businessClient.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS


// KEEP INCLUDES - put your custom includes here
import java.util.List;
// KEEP INCLUDES END
/**
 * Entity mapped to table DAILY_SALE.
 */
public class DailySale {

    private Long id;
    private long syncId;
    private Integer isDelivery;
    private Integer isTogo;
    private Integer tip;
    private Integer number;
    private String method;
    private Double received;
    private Double discount;
    private java.util.Date date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DailySaleDao myDao;

    private List<SaleIngrediente> ingredients;
    private List<SaleProducto> products;
    private List<SaleCombinacion> combos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DailySale() {
    }

    public DailySale(Long id) {
        this.id = id;
    }

    public DailySale(Long id, long syncId, Integer isDelivery, Integer isTogo, Integer tip, Integer number, String method, Double received, Double discount, java.util.Date date) {
        this.id = id;
        this.syncId = syncId;
        this.isDelivery = isDelivery;
        this.isTogo = isTogo;
        this.tip = tip;
        this.number = number;
        this.method = method;
        this.received = received;
        this.discount = discount;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDailySaleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSyncId() {
        return syncId;
    }

    public void setSyncId(long syncId) {
        this.syncId = syncId;
    }

    public Integer getIsDelivery() {
        return isDelivery;
    }

    public void setIsDelivery(Integer isDelivery) {
        this.isDelivery = isDelivery;
    }

    public Integer getIsTogo() {
        return isTogo;
    }

    public void setIsTogo(Integer isTogo) {
        this.isTogo = isTogo;
    }

    public Integer getTip() {
        return tip;
    }

    public void setTip(Integer tip) {
        this.tip = tip;
    }

    public Integer getNumber() {
        return number;
    }

    public void setNumber(Integer number) {
        this.number = number;
    }

    public String getMethod() {
        return method;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public Double getReceived() {
        return received;
    }

    public void setReceived(Double received) {
        this.received = received;
    }

    public Double getDiscount() {
        return discount;
    }

    public void setDiscount(Double discount) {
        this.discount = discount;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleIngrediente> getIngredients() {
        if (ingredients == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleIngredienteDao targetDao = daoSession.getSaleIngredienteDao();
            List<SaleIngrediente> ingredientsNew = targetDao._queryDailySale_Ingredients(id);
            synchronized (this) {
                if(ingredients == null) {
                    ingredients = ingredientsNew;
                }
            }
        }
        return ingredients;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetIngredients() {
        ingredients = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleProducto> getProducts() {
        if (products == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleProductoDao targetDao = daoSession.getSaleProductoDao();
            List<SaleProducto> productsNew = targetDao._queryDailySale_Products(id);
            synchronized (this) {
                if(products == null) {
                    products = productsNew;
                }
            }
        }
        return products;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProducts() {
        products = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleCombinacion> getCombos() {
        if (combos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleCombinacionDao targetDao = daoSession.getSaleCombinacionDao();
            List<SaleCombinacion> combosNew = targetDao._queryDailySale_Combos(id);
            synchronized (this) {
                if(combos == null) {
                    combos = combosNew;
                }
            }
        }
        return combos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCombos() {
        combos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String ingredientFields(){
		  StringBuilder cadena = new StringBuilder();
		  cadena.append("[");
		  int i = 0;
		  for(SaleIngrediente actual : this.getIngredients()){
			  if(i!=0){
					cadena.append(",");
				}
			  cadena.append("{\"sync_id\": "+actual.getIngrediente().getSyncId()+",\""+Setup.COLUMN_INGREDIENT_QTY+"\": "+actual.getQuantity()+"}");
				i++;  
		  }
		  cadena.append("]");
		  return cadena.toString();
	  }
    public String productFields(){
		  StringBuilder cadena = new StringBuilder();
		  cadena.append("[");
		  int i = 0;
		  for(SaleProducto actual : this.getProducts()){
			  if(i!=0){
					cadena.append(",");
				}
			  cadena.append("{\"sync_id\": "+actual.getProducto().getSyncId()+",\""+Setup.COLUMN_INGREDIENT_QTY+"\": "+actual.getQuantity()+"}");
				i++;  
		  }
		  cadena.append("]");
		  Log.i("MISPRUEBAS","PORODUCTOS DE LA VENTAS: "+cadena.toString());
		  return cadena.toString();
	  }
    public String comboFields(){
		  StringBuilder cadena = new StringBuilder();
		  cadena.append("[");
		  int i = 0;
		  for(SaleCombinacion actual : this.getCombos()){
			  if(i!=0){
					cadena.append(",");
				}
			  cadena.append("{\"sync_id\": "+actual.getCombinacion().getSyncId()+",\""+Setup.COLUMN_INGREDIENT_QTY+"\": "+actual.getQuantity()+"}");
				i++;  
		  }
		  cadena.append("]");
		  return cadena.toString();
	  }
    public String serializedFields(){
		  return "{\"_id\": "+this.getId()+",\""+Setup.COLUMN_SALE_DATE+"\": "+this.getDate().getTime()+",\""+Setup.COLUMN_SALE_ISDELIVERY+"\": "+this.getIsDelivery()+",\""+Setup.COLUMN_SALE_METHOD+"\": \""+this.getMethod()+"\",\""+Setup.COLUMN_SALE_ISTOGO+"\": "+this.getIsTogo()+",\""+Setup.COLUMN_SALE_TIP+"\": "+this.getTip()+",\""+Setup.COLUMN_SALE_DISCOUNT+"\": "+this.getDiscount()+",\""+Setup.COLUMN_SALE_NUMBER+"\": "+this.getNumber()+",\""+Setup.COLUMN_SALE_RECEIVED+"\":"+this.getReceived()+",\"ingredients\": "+this.ingredientFields()+",\"products\": "+this.productFields()+",\"combos\": "+this.comboFields()+"}";
	  }
    // KEEP METHODS END

}
