package com.nest5.businessClient;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.nest5.businessClient.Ingrediente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INGREDIENTE.
*/
public class IngredienteDao extends AbstractDao<Ingrediente, Long> {

    public static final String TABLENAME = "INGREDIENTE";

    /**
     * Properties of entity Ingrediente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SyncId = new Property(1, long.class, "syncId", false, "SYNC_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CostPerUnit = new Property(3, Double.class, "costPerUnit", false, "COST_PER_UNIT");
        public final static Property PricePerUnit = new Property(4, Double.class, "pricePerUnit", false, "PRICE_PER_UNIT");
        public final static Property Date = new Property(5, java.util.Date.class, "Date", false, "DATE");
        public final static Property ImpuestoId = new Property(6, Long.class, "impuestoId", false, "IMPUESTO_ID");
    };

    private DaoSession daoSession;


    public IngredienteDao(DaoConfig config) {
        super(config);
    }
    
    public IngredienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INGREDIENTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SYNC_ID' INTEGER NOT NULL ," + // 1: syncId
                "'NAME' TEXT," + // 2: name
                "'COST_PER_UNIT' REAL," + // 3: costPerUnit
                "'PRICE_PER_UNIT' REAL," + // 4: pricePerUnit
                "'DATE' INTEGER," + // 5: Date
                "'IMPUESTO_ID' INTEGER);"); // 6: impuestoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INGREDIENTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ingrediente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSyncId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Double costPerUnit = entity.getCostPerUnit();
        if (costPerUnit != null) {
            stmt.bindDouble(4, costPerUnit);
        }
 
        Double pricePerUnit = entity.getPricePerUnit();
        if (pricePerUnit != null) {
            stmt.bindDouble(5, pricePerUnit);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(6, Date.getTime());
        }
 
        Long impuestoId = entity.getImpuestoId();
        if (impuestoId != null) {
            stmt.bindLong(7, impuestoId);
        }
    }

    @Override
    protected void attachEntity(Ingrediente entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ingrediente readEntity(Cursor cursor, int offset) {
        Ingrediente entity = new Ingrediente( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // syncId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // costPerUnit
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // pricePerUnit
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // Date
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // impuestoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ingrediente entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSyncId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCostPerUnit(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setPricePerUnit(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setImpuestoId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ingrediente entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ingrediente entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getImpuestoDao().getAllColumns());
            builder.append(" FROM INGREDIENTE T");
            builder.append(" LEFT JOIN IMPUESTO T0 ON T.'IMPUESTO_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Ingrediente loadCurrentDeep(Cursor cursor, boolean lock) {
        Ingrediente entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Impuesto impuesto = loadCurrentOther(daoSession.getImpuestoDao(), cursor, offset);
        entity.setImpuesto(impuesto);

        return entity;    
    }

    public Ingrediente loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Ingrediente> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Ingrediente> list = new ArrayList<Ingrediente>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Ingrediente> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Ingrediente> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
