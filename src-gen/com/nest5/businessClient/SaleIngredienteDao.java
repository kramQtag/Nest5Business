package com.nest5.businessClient;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.nest5.businessClient.SaleIngrediente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALE_INGREDIENTE.
*/
public class SaleIngredienteDao extends AbstractDao<SaleIngrediente, Void> {

    public static final String TABLENAME = "SALE_INGREDIENTE";

    /**
     * Properties of entity SaleIngrediente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Quantity = new Property(0, Integer.class, "quantity", false, "QUANTITY");
        public final static Property SaleId = new Property(1, Long.class, "saleId", false, "SALE_ID");
        public final static Property IngredienteId = new Property(2, Long.class, "ingredienteId", false, "INGREDIENTE_ID");
    };

    private DaoSession daoSession;

    private Query<SaleIngrediente> dailySale_IngredientsQuery;

    public SaleIngredienteDao(DaoConfig config) {
        super(config);
    }
    
    public SaleIngredienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALE_INGREDIENTE' (" + //
                "'QUANTITY' INTEGER," + // 0: quantity
                "'SALE_ID' INTEGER," + // 1: saleId
                "'INGREDIENTE_ID' INTEGER);"); // 2: ingredienteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALE_INGREDIENTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SaleIngrediente entity) {
        stmt.clearBindings();
 
        Integer quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(1, quantity);
        }
 
        Long saleId = entity.getSaleId();
        if (saleId != null) {
            stmt.bindLong(2, saleId);
        }
 
        Long ingredienteId = entity.getIngredienteId();
        if (ingredienteId != null) {
            stmt.bindLong(3, ingredienteId);
        }
    }

    @Override
    protected void attachEntity(SaleIngrediente entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SaleIngrediente readEntity(Cursor cursor, int offset) {
        SaleIngrediente entity = new SaleIngrediente( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // quantity
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // saleId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // ingredienteId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SaleIngrediente entity, int offset) {
        entity.setQuantity(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setSaleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIngredienteId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SaleIngrediente entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SaleIngrediente entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ingredients" to-many relationship of DailySale. */
    public List<SaleIngrediente> _queryDailySale_Ingredients(Long ingredienteId) {
        synchronized (this) {
            if (dailySale_IngredientsQuery == null) {
                QueryBuilder<SaleIngrediente> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IngredienteId.eq(null));
                dailySale_IngredientsQuery = queryBuilder.build();
            }
        }
        Query<SaleIngrediente> query = dailySale_IngredientsQuery.forCurrentThread();
        query.setParameter(0, ingredienteId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDailySaleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getIngredienteDao().getAllColumns());
            builder.append(" FROM SALE_INGREDIENTE T");
            builder.append(" LEFT JOIN DAILY_SALE T0 ON T.'SALE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN INGREDIENTE T1 ON T.'INGREDIENTE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SaleIngrediente loadCurrentDeep(Cursor cursor, boolean lock) {
        SaleIngrediente entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DailySale dailySale = loadCurrentOther(daoSession.getDailySaleDao(), cursor, offset);
        entity.setDailySale(dailySale);
        offset += daoSession.getDailySaleDao().getAllColumns().length;

        Ingrediente ingrediente = loadCurrentOther(daoSession.getIngredienteDao(), cursor, offset);
        entity.setIngrediente(ingrediente);

        return entity;    
    }

    public SaleIngrediente loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SaleIngrediente> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SaleIngrediente> list = new ArrayList<SaleIngrediente>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SaleIngrediente> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SaleIngrediente> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
