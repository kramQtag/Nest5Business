package com.nest5.businessClient;

import com.nest5.businessClient.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SALE_INGREDIENTE.
 */
public class SaleIngrediente {

    private Integer quantity;
    private Long saleId;
    private Long ingredienteId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SaleIngredienteDao myDao;

    private DailySale dailySale;
    private Long dailySale__resolvedKey;

    private Ingrediente ingrediente;
    private Long ingrediente__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SaleIngrediente() {
    }

    public SaleIngrediente(Integer quantity, Long saleId, Long ingredienteId) {
        this.quantity = quantity;
        this.saleId = saleId;
        this.ingredienteId = ingredienteId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSaleIngredienteDao() : null;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public Long getSaleId() {
        return saleId;
    }

    public void setSaleId(Long saleId) {
        this.saleId = saleId;
    }

    public Long getIngredienteId() {
        return ingredienteId;
    }

    public void setIngredienteId(Long ingredienteId) {
        this.ingredienteId = ingredienteId;
    }

    /** To-one relationship, resolved on first access. */
    public DailySale getDailySale() {
        Long __key = this.saleId;
        if (dailySale__resolvedKey == null || !dailySale__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DailySaleDao targetDao = daoSession.getDailySaleDao();
            DailySale dailySaleNew = targetDao.load(__key);
            synchronized (this) {
                dailySale = dailySaleNew;
            	dailySale__resolvedKey = __key;
            }
        }
        return dailySale;
    }

    public void setDailySale(DailySale dailySale) {
        synchronized (this) {
            this.dailySale = dailySale;
            saleId = dailySale == null ? null : dailySale.getId();
            dailySale__resolvedKey = saleId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Ingrediente getIngrediente() {
        Long __key = this.ingredienteId;
        if (ingrediente__resolvedKey == null || !ingrediente__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            IngredienteDao targetDao = daoSession.getIngredienteDao();
            Ingrediente ingredienteNew = targetDao.load(__key);
            synchronized (this) {
                ingrediente = ingredienteNew;
            	ingrediente__resolvedKey = __key;
            }
        }
        return ingrediente;
    }

    public void setIngrediente(Ingrediente ingrediente) {
        synchronized (this) {
            this.ingrediente = ingrediente;
            ingredienteId = ingrediente == null ? null : ingrediente.getId();
            ingrediente__resolvedKey = ingredienteId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
