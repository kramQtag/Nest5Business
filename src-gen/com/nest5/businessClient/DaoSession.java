package com.nest5.businessClient;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.nest5.businessClient.DailySale;
import com.nest5.businessClient.Impuesto;
import com.nest5.businessClient.Ingrediente;
import com.nest5.businessClient.Producto;
import com.nest5.businessClient.Combinacion;
import com.nest5.businessClient.SaleIngrediente;
import com.nest5.businessClient.SaleProducto;
import com.nest5.businessClient.SaleCombinacion;

import com.nest5.businessClient.DailySaleDao;
import com.nest5.businessClient.ImpuestoDao;
import com.nest5.businessClient.IngredienteDao;
import com.nest5.businessClient.ProductoDao;
import com.nest5.businessClient.CombinacionDao;
import com.nest5.businessClient.SaleIngredienteDao;
import com.nest5.businessClient.SaleProductoDao;
import com.nest5.businessClient.SaleCombinacionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig dailySaleDaoConfig;
    private final DaoConfig impuestoDaoConfig;
    private final DaoConfig ingredienteDaoConfig;
    private final DaoConfig productoDaoConfig;
    private final DaoConfig combinacionDaoConfig;
    private final DaoConfig saleIngredienteDaoConfig;
    private final DaoConfig saleProductoDaoConfig;
    private final DaoConfig saleCombinacionDaoConfig;

    private final DailySaleDao dailySaleDao;
    private final ImpuestoDao impuestoDao;
    private final IngredienteDao ingredienteDao;
    private final ProductoDao productoDao;
    private final CombinacionDao combinacionDao;
    private final SaleIngredienteDao saleIngredienteDao;
    private final SaleProductoDao saleProductoDao;
    private final SaleCombinacionDao saleCombinacionDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        dailySaleDaoConfig = daoConfigMap.get(DailySaleDao.class).clone();
        dailySaleDaoConfig.initIdentityScope(type);

        impuestoDaoConfig = daoConfigMap.get(ImpuestoDao.class).clone();
        impuestoDaoConfig.initIdentityScope(type);

        ingredienteDaoConfig = daoConfigMap.get(IngredienteDao.class).clone();
        ingredienteDaoConfig.initIdentityScope(type);

        productoDaoConfig = daoConfigMap.get(ProductoDao.class).clone();
        productoDaoConfig.initIdentityScope(type);

        combinacionDaoConfig = daoConfigMap.get(CombinacionDao.class).clone();
        combinacionDaoConfig.initIdentityScope(type);

        saleIngredienteDaoConfig = daoConfigMap.get(SaleIngredienteDao.class).clone();
        saleIngredienteDaoConfig.initIdentityScope(type);

        saleProductoDaoConfig = daoConfigMap.get(SaleProductoDao.class).clone();
        saleProductoDaoConfig.initIdentityScope(type);

        saleCombinacionDaoConfig = daoConfigMap.get(SaleCombinacionDao.class).clone();
        saleCombinacionDaoConfig.initIdentityScope(type);

        dailySaleDao = new DailySaleDao(dailySaleDaoConfig, this);
        impuestoDao = new ImpuestoDao(impuestoDaoConfig, this);
        ingredienteDao = new IngredienteDao(ingredienteDaoConfig, this);
        productoDao = new ProductoDao(productoDaoConfig, this);
        combinacionDao = new CombinacionDao(combinacionDaoConfig, this);
        saleIngredienteDao = new SaleIngredienteDao(saleIngredienteDaoConfig, this);
        saleProductoDao = new SaleProductoDao(saleProductoDaoConfig, this);
        saleCombinacionDao = new SaleCombinacionDao(saleCombinacionDaoConfig, this);

        registerDao(DailySale.class, dailySaleDao);
        registerDao(Impuesto.class, impuestoDao);
        registerDao(Ingrediente.class, ingredienteDao);
        registerDao(Producto.class, productoDao);
        registerDao(Combinacion.class, combinacionDao);
        registerDao(SaleIngrediente.class, saleIngredienteDao);
        registerDao(SaleProducto.class, saleProductoDao);
        registerDao(SaleCombinacion.class, saleCombinacionDao);
    }
    
    public void clear() {
        dailySaleDaoConfig.getIdentityScope().clear();
        impuestoDaoConfig.getIdentityScope().clear();
        ingredienteDaoConfig.getIdentityScope().clear();
        productoDaoConfig.getIdentityScope().clear();
        combinacionDaoConfig.getIdentityScope().clear();
        saleIngredienteDaoConfig.getIdentityScope().clear();
        saleProductoDaoConfig.getIdentityScope().clear();
        saleCombinacionDaoConfig.getIdentityScope().clear();
    }

    public DailySaleDao getDailySaleDao() {
        return dailySaleDao;
    }

    public ImpuestoDao getImpuestoDao() {
        return impuestoDao;
    }

    public IngredienteDao getIngredienteDao() {
        return ingredienteDao;
    }

    public ProductoDao getProductoDao() {
        return productoDao;
    }

    public CombinacionDao getCombinacionDao() {
        return combinacionDao;
    }

    public SaleIngredienteDao getSaleIngredienteDao() {
        return saleIngredienteDao;
    }

    public SaleProductoDao getSaleProductoDao() {
        return saleProductoDao;
    }

    public SaleCombinacionDao getSaleCombinacionDao() {
        return saleCombinacionDao;
    }

}
