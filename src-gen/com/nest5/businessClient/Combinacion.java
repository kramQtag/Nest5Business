package com.nest5.businessClient;

import com.nest5.businessClient.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COMBINACION.
 */
public class Combinacion {

    private Long id;
    private long syncId;
    private String name;
    private Double costPerUnit;
    private Double pricePerUnit;
    private java.util.Date Date;
    private Long impuestoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CombinacionDao myDao;

    private Impuesto impuesto;
    private Long impuesto__resolvedKey;


    public Combinacion() {
    }

    public Combinacion(Long id) {
        this.id = id;
    }

    public Combinacion(Long id, long syncId, String name, Double costPerUnit, Double pricePerUnit, java.util.Date Date, Long impuestoId) {
        this.id = id;
        this.syncId = syncId;
        this.name = name;
        this.costPerUnit = costPerUnit;
        this.pricePerUnit = pricePerUnit;
        this.Date = Date;
        this.impuestoId = impuestoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCombinacionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSyncId() {
        return syncId;
    }

    public void setSyncId(long syncId) {
        this.syncId = syncId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getCostPerUnit() {
        return costPerUnit;
    }

    public void setCostPerUnit(Double costPerUnit) {
        this.costPerUnit = costPerUnit;
    }

    public Double getPricePerUnit() {
        return pricePerUnit;
    }

    public void setPricePerUnit(Double pricePerUnit) {
        this.pricePerUnit = pricePerUnit;
    }

    public java.util.Date getDate() {
        return Date;
    }

    public void setDate(java.util.Date Date) {
        this.Date = Date;
    }

    public Long getImpuestoId() {
        return impuestoId;
    }

    public void setImpuestoId(Long impuestoId) {
        this.impuestoId = impuestoId;
    }

    /** To-one relationship, resolved on first access. */
    public Impuesto getImpuesto() {
        Long __key = this.impuestoId;
        if (impuesto__resolvedKey == null || !impuesto__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImpuestoDao targetDao = daoSession.getImpuestoDao();
            Impuesto impuestoNew = targetDao.load(__key);
            synchronized (this) {
                impuesto = impuestoNew;
            	impuesto__resolvedKey = __key;
            }
        }
        return impuesto;
    }

    public void setImpuesto(Impuesto impuesto) {
        synchronized (this) {
            this.impuesto = impuesto;
            impuestoId = impuesto == null ? null : impuesto.getId();
            impuesto__resolvedKey = impuestoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
