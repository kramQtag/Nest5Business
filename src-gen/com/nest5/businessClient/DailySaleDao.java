package com.nest5.businessClient;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nest5.businessClient.DailySale;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DAILY_SALE.
*/
public class DailySaleDao extends AbstractDao<DailySale, Long> {

    public static final String TABLENAME = "DAILY_SALE";

    /**
     * Properties of entity DailySale.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SyncId = new Property(1, long.class, "syncId", false, "SYNC_ID");
        public final static Property IsDelivery = new Property(2, Integer.class, "isDelivery", false, "IS_DELIVERY");
        public final static Property IsTogo = new Property(3, Integer.class, "isTogo", false, "IS_TOGO");
        public final static Property Tip = new Property(4, Integer.class, "tip", false, "TIP");
        public final static Property Number = new Property(5, Integer.class, "number", false, "NUMBER");
        public final static Property Method = new Property(6, String.class, "method", false, "METHOD");
        public final static Property Received = new Property(7, Double.class, "received", false, "RECEIVED");
        public final static Property Discount = new Property(8, Double.class, "discount", false, "DISCOUNT");
        public final static Property Date = new Property(9, java.util.Date.class, "date", false, "DATE");
    };


    public DailySaleDao(DaoConfig config) {
        super(config);
    }
    
    public DailySaleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DAILY_SALE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SYNC_ID' INTEGER NOT NULL ," + // 1: syncId
                "'IS_DELIVERY' INTEGER," + // 2: isDelivery
                "'IS_TOGO' INTEGER," + // 3: isTogo
                "'TIP' INTEGER," + // 4: tip
                "'NUMBER' INTEGER," + // 5: number
                "'METHOD' TEXT," + // 6: method
                "'RECEIVED' REAL," + // 7: received
                "'DISCOUNT' REAL," + // 8: discount
                "'DATE' INTEGER);"); // 9: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DAILY_SALE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DailySale entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSyncId());
 
        Integer isDelivery = entity.getIsDelivery();
        if (isDelivery != null) {
            stmt.bindLong(3, isDelivery);
        }
 
        Integer isTogo = entity.getIsTogo();
        if (isTogo != null) {
            stmt.bindLong(4, isTogo);
        }
 
        Integer tip = entity.getTip();
        if (tip != null) {
            stmt.bindLong(5, tip);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(6, number);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(7, method);
        }
 
        Double received = entity.getReceived();
        if (received != null) {
            stmt.bindDouble(8, received);
        }
 
        Double discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindDouble(9, discount);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(10, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DailySale readEntity(Cursor cursor, int offset) {
        DailySale entity = new DailySale( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // syncId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // isDelivery
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isTogo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // tip
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // method
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // received
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // discount
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DailySale entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSyncId(cursor.getLong(offset + 1));
        entity.setIsDelivery(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIsTogo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTip(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMethod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReceived(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDiscount(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DailySale entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DailySale entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
